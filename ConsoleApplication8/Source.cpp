#include<stdio.h>
#include <locale.h>
#include<iostream>
#include <math.h>
#include <time.h>
#include <stdint.h>
#include <string.h>
#include<stdlib.h>
#include "Header.h"

#define size 20
using namespace std;
int main()
{
	setlocale(LC_ALL, "Russian");
	int n;

	do
	{
		printf("Введите номер задания: ");
		scanf("%d", &n);
		cin.get();
		switch (n) {
/*1.	Описать структуру с именем NOTE1, содержащую поля: 
a.	Name – фамилия и инициалы
b.	TELE – номер телефона
c.	DATE – дата рождения (год, месяц, число)

Написать программу, выполняющую:
•	ввод с клавиатуры данных в массив BLOCK, состоящий из 9 элементов типа NOTE1, записи должны быть упорядочены по инициалам;
•	вывод на экран информации о людях, чьи дни рождения приходятся на месяц, значение которого введено с клавиатуры; 
если такого человека нет – выдать сообщение.
*/
		case 1: {

		}break;

			/*2.	Описать структуру с именем TOVAR, содержащую поля:
a.	название товара; 
b.	количество единиц товара; 
c.	стоимость товара; 
d.	дата поступления товара в виде структуры (год, месяц, день).

Написать функции:
•	создания массива SPISOK не более чем из 10 записей (структур) данных о товарах (ввод данных с клавиатуры);
•	вычисления средней стоимости товара;
•	расположения записей по возрастанию стоимости товаров;
•	вывода сведений о товарах, поступивших более 10 месяцев назад.

Все необходимые данные для функций должны передаваться в качестве их параметров. Использование глобальных параметров не допускается. Создать проект, который демонстрирует работу всех функций
*/
		case 2: {
			int count = 5 + rand() % 5;
			Tovar *products = NULL;
			int sum = 0;
			products = (Tovar*)malloc(count * sizeof(Tovar));
			if (products != 0)
			{
				for (int i = 0;i < count;i++)
				{
					
					(products + i)->name = (char*)malloc(12 * sizeof(char));
					generateName((products + i)->name);

					int k = (0 + rand() % 10);
					(products + i)->qnt= (int*)calloc(k, sizeof(int));

					int k1 = (0 + rand() % 1000);
					(products + i) ->price= (int*)calloc(k1, sizeof(int));
					sum +=(products + i)->price;

					(products + i)->date= (date*)malloc(12 * sizeof(date));
					generateDate((products + i)->date);

					printf("# %d \t %s \t %d.%d.%d\t %d \t %d\n", i + 1, (products + i)->name, (products + i)->date->day, (products + i)->date->month, (products + i)->date->year,k,k1);

				}
				sortTovar(products, 8);

				printf("\nсредняя стоимость товаров: %d\n", sum / 8);
			}
		}break;

			/*3.	Описать структуру с именем MARSHRUT, содержащую поля: 
a.	номер маршрута; 
b.	начальный пункт маршрута; 
c.	конечный пункт маршрута; 
d.	длина маршрута.
Написать функции:
•	создания массива не более чем из 10 записей (структур) сведений о маршрутах (ввод данных с клавиатуры);
•	определения маршрута с максимальной длиной;
•	расположения записей по возрастанию номеров маршрутов;
•	вывода сведений о маршрутах, которые начинаются или заканчиваются в пункте, название которого вводится с клавиатуры.

Все необходимые данные для функций должны передаваться в качестве их параметров. Использование глобальных параметров не допускается. Создать проект, который демонстрирует работу всех функций.
*/
		case 3: {
		}break;

			/*4.	Описать структуру с именем ABON, содержащую поля:
a.	фамилия и инициалы абонента;
b.	номер телефона;
c.	дата подключения телефона в виде структуры (год, месяц, день);
d.	начисленная сумма оплаты;
e.	сумма на счету абонента
Написать функции:
•	создания массива не более чем из 12 записей (структур) данных об абонентах (ввод данных с клавиатуры);
•	расположения записей по алфавиту (с учетом инициалов для абонентов с одинаковыми фамилиями;
•	добавить 20 гр. на счета абонентов, которых подключили более 10 лет назад;
•	вывода сведений об абонентах, у которых сумма на счету отрицательная после вычета начислений;
•	вывода сведений об абоненте, номер телефона которого вводится с клавиатуры

Все необходимые данные для функций должны передаваться в качестве их параметров. Использование глобальных параметров не допускается. Создать проект, который демонстрирует работу всех функций.
*/
		case 4: {
		}break;
		}
	} while (n > 0);
}